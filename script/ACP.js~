var factMult=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]; // Facteur multiplicatif des X

function setGraph(){
	//efface l'ancien SVG pour Nouveau SVG 
d3.selectAll("svg > *").remove;
var dataDict = {};
var nomX=[];
var betaDict = {};
var nbBeta = 29;

d3.queue()
    .defer(d3.csv, "data/puechabon/acp/X_par_heure.csv",d3.values)
    .defer(d3.csv, "data/puechabon/acp/data_stand.csv",d3.values)
    .defer(d3.csv, "data/puechabon/acp/vec_propre.csv",d3.values)
    .defer(d3.csv, "data/puechabon/acp/beta_eq.csv",d3.values)
	.defer(d3.csv, "data/puechabon/SLIDERS/factMult_origin.csv",d3.values)
    .await(calcul);    
    
    function calcul(error,X_par_heure,data_stand,vec_propre,beta_eq,factMult_origin){ 

			for  (var i=0;i<28;i++) {
    			for  (var j=1;j<49;j++) {
    				
    				var ValueModif=Number(X_par_heure[i][j])*factMult[i];

    				
    				if (ValueModif<factMult_origin[i][4]) {
    				X_par_heure[i][j]=Number(factMult_origin[i][4]);
    				}	
    				
    				else if (ValueModif>factMult_origin[i][5]) {
    				X_par_heure[i][j]=Number(factMult_origin[i][5]);
    				}
    				
    				else {
    				X_par_heure[i][j]=ValueModif;
    				}
    		}}
    		console.log(X_par_heure)
   	 // TRANSPOSE############
    	var transpose=d3.transpose(X_par_heure); 
    	//NORMALISE ############   
    	var data=[];
    	for (var TIME=1;TIME<49;TIME++) {
    		var dim1=[];
    		var dim2=[];
    		var dim3=[];
	    	transpose[TIME].forEach(
	    		function NORM(value,i){
	    			var CR=(value-data_stand[i][1])/data_stand[i][2] ; //CENTRER REDUIT
	    			dim1.push(CR*vec_propre[i][1]);
	    			dim2.push(CR*vec_propre[i][2]);
	    			dim3.push(CR*vec_propre[i][3]);
	    	});
	    	
	    	var data_DIM=[];
	    	data_DIM.push(d3.sum(dim1),d3.sum(dim2),d3.sum(dim3));
	    	var Y=data_DIM[0]*beta_eq[0][1]+data_DIM[1]*beta_eq[1][1]+data_DIM[2]*beta_eq[2][1]+Number(beta_eq["columns"][1]);
	    	if (Y<0) {
	    		Y=0;
	    	}
	    	data.push(Y);
    }
	for(i=0;i<nbBeta;i++){
		nomX.push(X_par_heure[i][0]);}
		sliders(nomX);
    	
    	
		// SVG ##################################################################
		var m = [80, 80, 80, 80]; // margins
		var w = 800 - m[1] - m[3]; // width
		var h = 400 - m[0] - m[2]; // height
		// X scale 
		var x = d3.scaleLinear().domain([0, data.length]).range([0, w]);
		// Y scale 
		var y = d3.scaleLinear().domain([0, 14]).range([h, 0]);


    	
		// create a line function that can convert data[] into x and y points
		var line = d3.line()
			.x(function(d,i) { 
				//console.log('X value : ' + d + ' using index: ' + i + ' to be at: ' + x(i) + ' using our xScale.');
				// return the X coordinate
				return x(i); 
			})
			.y(function(d) { 
				//console.log('Y value : ' + d + ' situé : ' + y(d) + " avec yScale.");
				// return the Y coordinate 
				return y(d); 
			})

			// Add an SVG element with the desired dimensions and margin.
			var graph = d3.select("#graph")
			      .attr("width", w + m[1] + m[3])
			      .attr("height", h + m[0] + m[2])
			    .append("svg:g")
			      .attr("transform", "translate(" + m[3] + "," + m[0] + ")");

			// create xAxis
			var xAxis = d3.axisBottom(x).ticks(24);
			// Add the x-axis.
			graph.append("svg:g")
			      .attr("class", "x-axis")
			      .attr("transform", "translate(0," + h + ")")
			      .call(xAxis);


			// create yAxis
			var yAxisLeft = d3.axisLeft(y).ticks(8);
			// Add the y-axis to the left
			graph.append("svg:g")
			      .attr("class", "y-axis")
			      .attr("transform", "translate(-25,0)")
			      .call(yAxisLeft);
			
  			// TRACE  la COURBE
  			graph.append("svg:path").attr("d", line(data));
  			
			
	}
}

// Info box
function drawInfoBox(datay,datax,X,Y){
	var info = '<rect  x=800 y=100 height="70" width="250" fill="grey" opacity=0.5 "/>'
	info += '<text  y=130 x =870 font-size="20" fill="black">'+'A '+(datax/2)+' Heure </text> ';
	info += '<text  y=160 x=850 font-size="20" fill="black">Flux de sève = '+Math.round(datay*100)/100+'</text> ';
	var monSVGinfo = document.getElementById("infobox");
	monSVGinfo.innerHTML = info  ; 	
	//monSVGinfo.setAttribute("transform","translate("+(X-200)+","+(Y+100)+")");	
}
function removeInfoBox(){
	var info="";
	var monSVGinfo = document.getElementById("infobox");
	monSVGinfo.innerHTML = info  ; 	
}

// Fonction pour choisir le facteur multiplicatif associé a chaque X. De 0 à 4 (0.25 : divisé par 4 à 4 : multiplié par 4)	
// Fonction qui créer les SLIDERS
dicoNom = {
"NETRAD_1h30":"NETRAD_1h30",
 "P_1h":"P_1h",
"PA_3h":"PA_3h",
 "PPFD_DIF_1h": "PPFD_DIF_1h",
"PPFD_IN_1h":"Densité de Flux Photon Photosynthetique (μmol m"+"-2".sup()+" s"+"-1".sup()+")",
"PPFD_OUT_1h":"PPFD_OUT_1h",
"RH":"RH",
"SW_IN_1h":"SW_IN_1h",
"SW_OUT_30m":"SW_OUT_30m",
"TA":"Temperature de l'air (°C)",
"TS":"Temperature du sol (°C)",
 "TS_2": "TS_2",
"TS_3":"TS_3",
"WD_1h30":"Direction du vent (Degre)",
"WS": "WS",
"CO2":"Concentration de CO2 (ppm)",
"FC_1h":"FC_1h",
"H_1h30":"H_1h30",
"H2O_3h":"H2O_3h",
"LE_30m":"Flux de chaleur latente (W m"+"-2".sup()+")",
"SB":"SB",
"SC_3h":"SC_3h",
"SH_3h":"Flux de Stockage de chaleur sensible (W m"+"-2".sup()+")",
"SLE_3h":"SLE_3h",
 "TAU_30m": "TAU_30m",
"USTAR_30m":"USTAR_30m",
"ZL_3h":"Paramètre de stabilité (sans unité)",
"G":"G",
"VPD":"VPD"}



function sliders(nomX) {

	d3.csv("data/puechabon/sliders/factMult_origin.csv", function(error,data){
		

		minFact = [];
		maxFact = [];
		step = [];
		minVal = [];
		maxVal = [];

		data.forEach(function (d){
			minFact.push(d.factMultMin);
			maxFact.push(d.factMultMax);
			step.push(d.step);
			minVal.push(d.minVal);
			maxVal.push(d.maxVal)
		})

		var ID="";
		var ID2 ="";
		var sliderSX ="";
			for (a=0;a<=14;a++) {
				// pour transposer les valeurs des facteurs multiplicateurs dans le même ordre de grandeur que celui des modalités sans modifier les sliders (pour bien recupérer le facteur multiplicateur utilisé par l'équation)
				// ... je dois stocker les différentes valeurs constitutant le slider dans un tableau, avec son minimum, son maximum, et toutes ses valeurs intérmédiaires qui dépendent du pas.
				// cela me permettra de récupérer l'indice du tableau correspondant à chaque valeur, et de l'utiliser comme coefficient multiplicateur.
				// Ex : mon slider part de 0.95 à 1.05 avec un pas de 0.025. Je veux afficher des valeurs qui vont de 390 à 450. 
				// (1.05 - 0.95) / 0.25 = 4, soit l'indice maximal de mon tableau (soit la taille du tableau - 1).
				// Je recrée les valeurs constitutant le slider en partant de la valeur de départ, et on ajoutant le pas à chaque fois, cela me donne le tableau suivant : [0.95, 0.975, 1, 1.025, 1.05].
				// Selon la position du slider, j'utiliserai l'indice du tableau pour transposer ma valeur dans le plan d'arrivée. Par example, si le slider retourne 1.025, je détermine l'indice du tableau correspondant : ici 3.
				// J'effectue ensuite l'opération suivante : 390 + 3 * (450 - 390)/4 => 435.
				// Un facteur multiplicateur de 1.025 correspond donc à 435 dans mes données.

				var rangeValues = []; // tableau qui va contenir les valeurs du sliders
				var numberValues = (maxFact[a] - minFact[a])/step[a]; // nombre de valeurs intermédiaire du range
				var i = 0;
				var value = parseFloat(minFact[a]); // min du slider converti en float
				while(i<=numberValues){
					rangeValues.push(parseFloat(value));
					value += parseFloat(step[a]); // ajout du pas à chaque itération, tant que i < valeur du slider maximum
					value = parseFloat(value.toFixed(3)); 
					i++;
				}
				var ID = "VAL"+a;
				var ID2 = "value"+a;
				printValue = parseFloat(minVal[a])+ parseFloat(rangeValues.indexOf(parseFloat(factMult[a]))*(maxVal[a] - minVal[a])/numberValues) // opération de translation
				printValue = parseFloat(printValue.toFixed(2));
				sliderSX +='<p>'+dicoNom[nomX[a]]+' :  <span id="'+ID2+'">'+ printValue +'</span></p><div class="slidecontainer"><p class ="baliseInf">'+minVal[a]+'</p><input oninput="Change('+ID+','+ID2+','+a+')"  type="range" min="'+minFact[a]+'" max="'+maxFact[a]+'" step="'+step[a]+'" value="'+factMult[a]+'" class="slider" id="'+ID+'"><p class = "baliseSup">'+maxVal[a]+'</p></div>';
				var sliderS1 = document.getElementById("sliderS1");
				sliderS1.innerHTML = sliderSX ;
			}
		var sliderSX ="";
			for (a=15;a<=28;a++) {
				var rangeValues = [];
				var numberValues = (maxFact[a] - minFact[a])/step[a];
				var i = 0;
				var value = parseFloat(minFact[a]);
				while(i<=numberValues){
					rangeValues.push(parseFloat(value));
					value += parseFloat(step[a]);
					value = parseFloat(value.toFixed(3));
					i++;
				}
				var ID = "VAL"+a;
				var ID2 = "value"+a;
				printValue = parseFloat(minVal[a])+ parseFloat(rangeValues.indexOf(parseFloat(factMult[a]))*(maxVal[a] - minVal[a])/numberValues)
				printValue = parseFloat(printValue.toFixed(2));
				sliderSX +='<p>'+dicoNom[nomX[a]]+' :  <span id="'+ID2+'">'+ printValue +'</span></p><div class="slidecontainer"><p class ="baliseInf">'+minVal[a]+'</p><input oninput="Change('+ID+','+ID2+','+a+')"  type="range" min="'+minFact[a]+'" max="'+maxFact[a]+'" step="'+step[a]+'" value="'+factMult[a]+'" class="slider" id="'+ID+'"><p class = "baliseSup">'+maxVal[a]+'</p></div>';
				var sliderS2 = document.getElementById("sliderS2");
				sliderS2.innerHTML = sliderSX ;
			}
		})
}

function Change(ID,ID2,a) {
	var VAL = ID.value; // valeur qu'on récuper
	var VAL2= ID2 ; // et ou est ce qu'on l'affiche 
	VAL2.innerHTML = VAL ;
	factMult[a]=VAL ;
	setGraph(factMult);
} 


